#! /usr/bin/python

from gevent import monkey; monkey.patch_all()

from socketio import socketio_manage
from socketio.server import SocketIOServer
from socketio.namespace import BaseNamespace
from socketio.mixins import RoomsMixin, BroadcastMixin
import time
from datetime import datetime
import thread
import os
import socket
from multiprocessing import Process

import client_module


class Application(object):
    
    client=None
    
    def __init__(self):
        print ("Application haseratu da.....")
        self.buffer = []
        self.request = {
        }

    def __call__(self, environ, start_response):
        
        path = environ['PATH_INFO'].strip('/')
        if not path:
            start_response('200 OK', [('Content-Type', 'text/html')])
            return ['<h1>Paraninfo. </h1>']

        if path.startswith('static/') or  path =='proba.html':
            try:
                data = open(path).read()
            except Exception:
                return "not_found(start_response)"

            if path.endswith(".js"):
                content_type = "text/javascript"
            elif path.endswith(".css"):
                content_type = "text/css"
            elif path.endswith(".swf"):
                content_type = "application/x-shockwave-flash"
            else:
                content_type = "text/html"

            start_response('200 OK', [('Content-Type', content_type)])
            return [data]

        if path.startswith("socket.io"):
            
            socketio_manage(environ, {'': ParaninfoNamespace}, self.request)
        else:
            return self.not_found(start_response)

    def not_found(self, start_response):
            start_response('404 Not Found', [])
            return ['<h1>Not Found...</h1>']


class ParaninfoNamespace(BaseNamespace, RoomsMixin, BroadcastMixin):

    client = None
    no_broadcast=[ '<sinta sarr="ESCENARIO:CLASE_LOCAL" />',
                  '<sinta sarr="ESCENARIO:SEMINARIO/CLASE" />',
                  '<sinta sarr="ESCENARIO:PELICULA" />',
                  '<sinta sarr="MENU:ESCENARIOS" />',
                  '<sinta sarr="MENU:PRINCIPAL" />',
                  '<sinta sarr="MENU:LLAMARCOLGAR" />',
                  '<sinta sarr="MENU:SONIDO" />',
                  '<sinta sarr="MENU:LUCES" />',
                  '<sinta sarr="MENU:APAGAR" />',
                  '<sinta sarr="MENU:INICIO" />',
                  '<sinta sarr="DISPOSITIVO:CAMARA_1" />',
                  '<sinta sarr="DISPOSITIVO:CAMARA_2" />',
                  '<sinta sarr="DISPOSITIVO:CAMARA_3" />',
                  '<sinta sarr="DISPOSITIVO:PANTALLA_PRESIDENCIA" />',
                  '<sinta sarr="DISPOSITIVO:PANTALLA_ENTRADA" />',
                  '<sinta sarr="DISPOSITIVO:PIZARRA_DIGITAL" />',
                  '<sinta sarr="DISPOSITIVO:PROYECTOR_CENTRAL" />',
                  '<sinta sarr="DISPOSITIVO:PANTALLA_ELECTRICA" />',
                  '<sinta sarr="DISPOSITIVO:DVD" />',
                  '<sinta sarr="DISPOSITIVO:DVDGRAB" />',
                  '<sinta sarr="DISPOSITIVO:ORDENADOR_PRINCIPAL" />',
                  '<sinta sarr="DISPOSITIVO:PORTATIL1" />',
                  '<sinta sarr="DISPOSITIVO:PORTATIL2" />',
                  '<sinta sarr="DISPOSITIVO:PORTATIL3" />',
                  '<sinta sarr="DISPOSITIVO:PORTATIL4" />',
                  '<sinta sarr="DISPOSITIVO:CAMARA_DE_DOCUMENTOS" />',
                  '<sinta sarr="DISPOSITIVO:PLASMA" />',
                  '<sinta sarr="DISPOSITIVO:RED_THINK_CLIENT" />',
                  '<sinta sarr="SISTEMA:BIENVENIDO" />',
                  '<sinta sarr="CAMARA_1:TODAS_POSICIONES" />',
                  '<sinta sarr="CAMARA_2:TODAS_POSICIONES" />',
                  '<sinta sarr="CAMARA_3:TODAS_POSICIONES" />',
                  '<sinta sarr="CAMARA_1:TODAS_POSICIONES:CANCELAR" />',
                  '<sinta sarr="CAMARA_2:TODAS_POSICIONES:CANCELAR" />',
                  '<sinta sarr="CAMARA_3:TODAS_POSICIONES:CANCELAR" />',
                  '<sinta sarr="ALERT:X:OK" />',
                  '<sinta sarr="ALERT:X:NOK"/>'
                  ]
    _registry = {}
    _registry_order = []

    def initialize(self):
        print "hasratu egin da........"
    

    def on_cmd(self, cmd):
        global target_port
        global target_host
        
        idk=id(self)
        
        for i in self._registry_order:
            if i == idk:
                self._registry_order.remove(i)
                self._registry.pop(idk)
                
        self._registry[idk]=self
        self._registry_order.append(idk)
            
        if not self.client:
            self.client = client_module.Client(target_host, target_port)
            thread.start_new_thread(self.receive, ())
 
        print "bidali php zerbitzarira:: "+datetime.fromtimestamp( int(now/1000)  ).strftime('%Y-%m-%d %H:%M:%S') +" cmd: "+str(cmd)
        self.client.send(cmd)
                

    def receive(self):
        while True:
            r=self.client.receive()
            if r:
                if "\0" in r:
                    for c in r.split("\0"):
                        self.resp(c.strip())
                else:
                    self.resp(r.strip())
    
    def resp(self,msg):
        if not msg:
            return
        if (msg in self.no_broadcast ):
            print "*2* bidali intefazera ::: "+datetime.fromtimestamp( int(now/1000)  ).strftime('%Y-%m-%d %H:%M:%S') +" cmd: "+str(msg)+" NO broadcast"
            self._registry[self._registry_order[-1]].emit('result', msg)
        else:
            print "*2* bidali intefazera ::: "+datetime.fromtimestamp( int(now/1000)  ).strftime('%Y-%m-%d %H:%M:%S') +" cmd: "+str(msg)+" broadcast"
            self.broadcast_event('result', msg )
        
            
    def on_agindu(self):
        print "agindu........."


    def on_recv_disconnect(self):
        print "jaso recv_disconnect"
        self.disconnect(silent=True)
        #self.client.

    def on_user_message(self, msg):
        print "jaso on_user_message" + msg
        #self.emit_to_room('main_room', 'msg_to_room', self.socket.session['nickname'], msg)

    def on_connect(self, message):
        print ("CONNECT JASO DA")
        self.broadcast_event('announcement', 'Konexioa egin dut!!!!!!!!!!')
        
        self._registry[id(self)] = self
        

    def on_recv_message(self, message):
        print "jaso recv_message"+str(message)
    
        
    def _broadcast(self, event, message):
        for s in self._registry.keys(): #.values():
            print "emmmit.............."
            self._registry[s].emit(event, "<sinta sarr=\"ALERT:X:xxx"+str(s)+"xxxxxx \" />")
            self._registry[s].emit(event, message )
            print "<sinta sarr=\"ALERT:X:xxxxx"+str(s)+"xxxxxx \" />"







if __name__ == '__main__':
    
    target_host='192.168.110.237'
    target_port=4321
    listen_port=8080
    
    print 'Listening on port '+str(listen_port)
    os.chdir(os.path.dirname(os.path.abspath(os.sys.argv[0])))
    SocketIOServer(('0.0.0.0', listen_port), Application(),resource="socket.io", policy_server=False).serve_forever()
